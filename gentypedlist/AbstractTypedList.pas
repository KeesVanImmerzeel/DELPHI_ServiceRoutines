{+------------------------------------------------------------
 | Unit AbstractTypedList
 |
 | Version: 1.0  Created: 12.03.99 
 |               Last Modified: 12.03.99
 | Author : P. Below
 | Project: General utilitities
 | Description:
 |   This unit implements the abstract base type of all typed
 |   list classes generated by GenTypedList.
 +------------------------------------------------------------}
Unit AbstractTypedList;
Interface

Uses Classes;

Type
  TAbstractTypedList = Class ( TPersistent )
  Private
    FStorage: TList;

    Function GetCount: Integer;
    Function GetLastIndex: Integer;
    Function GetCapacity: Integer;
    Procedure SetCapacity( value : Integer );
  Protected

    Property Storage: TList read FStorage;
  Public 
    Constructor Create; virtual;
    Destructor Destroy; override;

    Procedure Clear; virtual; 
    Procedure Exchange(Index1, Index2: Integer);
    Procedure Move(CurIndex, NewIndex: Integer);
    Procedure Delete(Index: Integer); virtual; 

    Property Count: Integer read GetCount;
    property LastIndex: Integer read GetLastIndex;
    Property Capacity: Integer read GetCapacity write SetCapacity;
  End;

Implementation

Uses SysUtils;

{+--------------------------------------------------------------
 | Methods of TAbstractTypedList 
 |
 | Most of the methods of this class simply call equivalent methods
 | of the FStorage TList item.
 +-------------------------------------------------------------}

Constructor TAbstractTypedList.Create;
  Begin
    {inherited Create( AOwner );}
    FStorage := TList.Create;
  End; { TAbstractTypedList.Create }

Destructor TAbstractTypedList.Destroy; 
  Begin
    Clear;
    FStorage.Free;
    inherited Destroy;
  End; { TAbstractTypedList.Destroy }

Procedure TAbstractTypedList.Clear; 
  Begin
    FStorage.Clear;
  End; { TAbstractTypedList.Clear }

Procedure TAbstractTypedList.Exchange(Index1, Index2: Integer);
  Begin
    FStorage.Exchange( Index1, Index2 );
  End; { TAbstractTypedList.Exchange }

Procedure TAbstractTypedList.Move(CurIndex, NewIndex: Integer);
  Begin
    FStorage.Move( CurIndex, NewIndex );
  End; { TAbstractTypedList.Move }

Procedure TAbstractTypedList.Delete(Index: Integer); 
  Begin
    FStorage.Delete( Index );
  End; { TAbstractTypedList.Delete }

Function TAbstractTypedList.GetCount: Integer;
  Begin
    Result := FStorage.Count;
  End; { TAbstractTypedList.GetCount }

Function TAbstractTypedList.GetLastIndex: Integer;
  Begin
    Result := FStorage.Count - 1;
  End; { TAbstractTypedList.GetLastIndex }

Procedure TAbstractTypedList.SetCapacity( value : Integer ); 
  Var
    i: Integer;
  Begin
    If value < Count Then Begin 
      For i:= Lastindex  DownTo value - 1 Do 
        Delete( i );
    End; { If }
    FStorage.Capacity := value;
  End; { TAbstractTypedList.SetCapacity }

Function TAbstractTypedList.GetCapacity: Integer;
  Begin
    Result := FStorage.Capacity;
  End; { TAbstractTypedList.GetCapacity }

End { Unit AbstractTypedList }.

